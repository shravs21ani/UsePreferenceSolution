@using UserPreference.BlazorWasm.Services
@inject IToastService ToastService
@implements IDisposable

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
    @foreach (var toast in toasts)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header @GetToastHeaderClass(toast.Type)">
                <strong class="me-auto">@GetToastTitle(toast.Type)</strong>
                <button type="button" class="btn-close" @onclick="() => RemoveToast(toast.Id)"></button>
            </div>
            <div class="toast-body">
                @toast.Message
            </div>
        </div>
    }
</div>

@code {
    private List<ToastMessage> toasts = new();
    private int nextId = 1;

    protected override void OnInitialized()
    {
        // Subscribe to toast events
        ToastService.OnToast += AddToast;
    }

    private void AddToast(string type, string message)
    {
        var toast = new ToastMessage
        {
            Id = nextId++,
            Type = type,
            Message = message
        };

        toasts.Add(toast);
        StateHasChanged();

        // Auto-remove after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                RemoveToast(toast.Id);
                StateHasChanged();
            });
        });
    }

    private void RemoveToast(int id)
    {
        toasts.RemoveAll(t => t.Id == id);
        StateHasChanged();
    }

    private string GetToastHeaderClass(string type) => type switch
    {
        "success" => "bg-success text-white",
        "error" => "bg-danger text-white",
        "warning" => "bg-warning text-dark",
        "info" => "bg-info text-white",
        _ => "bg-secondary text-white"
    };

    private string GetToastTitle(string type) => type switch
    {
        "success" => "Success",
        "error" => "Error",
        "warning" => "Warning",
        "info" => "Information",
        _ => "Message"
    };

    public void Dispose()
    {
        ToastService.OnToast -= AddToast;
    }

    private class ToastMessage
    {
        public int Id { get; set; }
        public string Type { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
    }
}
